module.exports = (err, req, res, next) => {
  console.error('üî¥ –ü–æ–º–∏–ª–∫–∞:', err.stack);

  // Prisma errors
  if (err.code === 'P2002') {
    return res.status(400).json({ 
      success: false,
      error: '–ó–∞–ø–∏—Å –∑ —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–∏–º–∏ –≤–∂–µ —ñ—Å–Ω—É—î',
      code: 'DUPLICATE_ENTRY'
    });
  }

  if (err.code === 'P2025') {
    return res.status(404).json({ 
      success: false,
      error: '–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
      code: 'NOT_FOUND'
    });
  }

  if (err.code === 'P2003') {
    return res.status(400).json({ 
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –∑–≤\'—è–∑–∫—É –º—ñ–∂ –∑–∞–ø–∏—Å–∞–º–∏',
      code: 'FOREIGN_KEY_CONSTRAINT'
    });
  }

  // Validation errors
  if (err.name === 'ValidationError') {
    return res.status(400).json({ 
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó', 
      details: err.message,
      code: 'VALIDATION_ERROR'
    });
  }

  // JWT errors
  if (err.name === 'JsonWebTokenError') {
    return res.status(401).json({
      success: false,
      error: '–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω',
      code: 'INVALID_TOKEN'
    });
  }

  if (err.name === 'TokenExpiredError') {
    return res.status(401).json({
      success: false,
      error: '–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω–∞ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è',
      code: 'TOKEN_EXPIRED'
    });
  }

  // Custom application errors
  if (err.message) {
    return res.status(400).json({
      success: false,
      error: err.message,
      code: 'APPLICATION_ERROR'
    });
  }

  // Default error
  res.status(500).json({ 
    success: false,
    error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    code: 'INTERNAL_SERVER_ERROR'
  });
};