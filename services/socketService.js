const chatService = require('./chatService');

module.exports = (io) => {
  io.on('connection', (socket) => {
    console.log(`üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${socket.id}`);

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É
    socket.on('join-chat', (chatId) => {
      socket.join(chatId);
      console.log(`üí¨ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${socket.id} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É ${chatId}`);
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    socket.on('client-message', async (data) => {
      try {
        const { chatId, content } = data;
        
        if (!chatId || !content) {
          socket.emit('error', { message: '–ß–∞—Ç ID —Ç–∞ –∑–º—ñ—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ' });
          return;
        }

        const message = await chatService.sendMessage(chatId, content, false);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ —á–∞—Ç–µ
        io.to(chatId).emit('new-message', message);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        socket.broadcast.to('admins').emit('admin-notification', {
          type: 'new-message',
          chatId,
          message
        });

        console.log(`üìù –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ –≤ —á–∞—Ç—ñ ${chatId}`);
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:', error);
        socket.emit('error', { message: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è' });
      }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
    socket.on('admin-message', async (data) => {
      try {
        const { chatId, content } = data;
        
        if (!chatId || !content) {
          socket.emit('error', { message: '–ß–∞—Ç ID —Ç–∞ –∑–º—ñ—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ' });
          return;
        }

        const message = await chatService.sendMessage(chatId, content, true);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ —á–∞—Ç–µ
        io.to(chatId).emit('new-message', message);

        console.log(`üë®‚Äçüíº –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ –≤ —á–∞—Ç—ñ ${chatId}`);
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞:', error);
        socket.emit('error', { message: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è' });
      }
    });

    // –ê–¥–º–∏–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    socket.on('admin-connect', () => {
      socket.join('admins');
      console.log(`üõ†Ô∏è –ê–¥–º—ñ–Ω –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${socket.id}`);
      socket.emit('admin-connected', { message: '–£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —è–∫ –∞–¥–º—ñ–Ω' });
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —á–∞—Ç–∞
    socket.on('leave-chat', (chatId) => {
      socket.leave(chatId);
      console.log(`‚Ü©Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${socket.id} –ø–æ–∫–∏–Ω—É–≤ —á–∞—Ç ${chatId}`);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', () => {
      console.log(`üëã –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${socket.id}`);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–∫–µ—Ç–∞
    socket.on('error', (error) => {
      console.error('Socket –ø–æ–º–∏–ª–∫–∞:', error);
    });
  });

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–µ—Ä–≤–µ—Ä–∞
  io.engine.on('connection_error', (err) => {
    console.error('Connection –ø–æ–º–∏–ª–∫–∞:', err.req, err.code, err.message, err.context);
  });

  console.log('üîå Socket.IO —Å–µ—Ä–≤–µ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
};
